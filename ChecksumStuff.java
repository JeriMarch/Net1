/*

Since you haven't mentioned any language, so I am coding this program in Java.

Hope this should suffice your need

*/

public class ChecksumStuff{

/*

Public method to calculate checksum of given data words.

Input is array of 16 bit binary String.

*/

    public String generateChecksum(String data[]){

/*

Checksum is generated by adding all the data integers first and then calculating the one's complement of the resultant sum

*/

        return this.getOnesComplement(this.addAllData(data));

    }

/*

Verification is simple. Again add up all the data.

Then add the sum and checksum together. Then find the one' s complement of the result.

If the result is 0000000000000000, it means data has not corrupted oterwise data got corrupted in transit.

*/

    public boolean verfiyChecksum(String data[], String toBeVerifiedChecksum){

        String checksum = this.addAllData(data), //Find the sum of the data integers

                checksumSum = this.add(toBeVerifiedChecksum, checksum); // add resultant sum with toBeVerifiedChecksum

        checksumSum = this.getOnesComplement(checksumSum); // Get the one's complement of the above result

        return checksumSum.equals("0000000000000000"); // if it equals 0000000000000000 then our data is correct

    }

/*

Helper method to add all the data together

*/

    private String addAllData(String data[]){

        String addedValue = data[0];

        if(data.length>1)

            addedValue = this.add(data[0], data[1]);

        for(int i=2;i<data.length;i++){

            addedValue = this.add(data[i], addedValue);

        }

        return addedValue;

    }

/*

Helper method to add two 16 bit binary numbers. Carry is added back to LSB

*/

    private String add(String a, String b){

        String out = ""; int carry = 0;

        for(int i=15;i>=0;i--){

            int x= Character.getNumericValue(a.charAt(i)), y=Character.getNumericValue(b.charAt(i));

            switch(carry + x + y){

                case 3:

                    out = "1" + out;

                    carry = 1;

                    break;

                case 2:

                    out = "0" + out;

                    carry = 1;

                    break;

                case 1:

                    out = "1" + out;

                    carry = 0;

                    break;

                case 0:

                    out = "0" + out;

                    carry = 0;

                    break;

            }

        }

/*

Add back carry to LSB

*/

        if(carry == 1){

            StringBuilder str = new StringBuilder(out);

            int i = 15;

            while(carry != 0){

                if(out.charAt(i) == '0'){

                    carry = 0;

                }

                str.setCharAt(i, '1');

                i--;

            }

            out = str.toString();

        }

        return out;

    }

/*

Helper method to get the one's complement of the result

*/

    private String getOnesComplement(String out){

        StringBuilder str = new StringBuilder(out);

        for(int i=15;i>=0;i--){

            if(out.charAt(i) == '1')

                str.setCharAt(i, '0');

            else

                str.setCharAt(i, '1');

        }

        return str.toString();

    }
/*

Driver class to verify the Checksum class

*/



        public static void main(String a[]){

/*

We will use the same data as provided in the problem statement

We will use is as array of String

*/

            String data[] = {"1000011001011110","1010110001100000","0111000100101010","1000000110110101"};

            ChecksumStuff c = new ChecksumStuff();

/*

Generate the checksum for data

*/

            String checksum = c.generateChecksum(data);

            System.out.println("Generated checksum is " + checksum);

/*

Verify checksum

*/

            System.out.println("Checksum verification " + c.verfiyChecksum(data,checksum));

        }

    }

/*

Output matches with the one provided in problem statement

*/

/*

Output

Generated checksum is 1101101001100000

Checksum verification true

*/


